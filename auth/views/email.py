import datetime
from datetime import date

import random

from django.conf import settings
from django.db.models import Q
from django.shortcuts import redirect, render
from django.urls import reverse
from django_q.tasks import async_task

from auth.helpers import set_session_cookie
from auth.models import Session, Code
from notifications.email.users import send_auth_email
from notifications.telegram.users import notify_user_auth
from users.models.user import User


def email_auth(request):  # —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–µ–ª–∏–∫–∞
    if request.method != "POST":
        return redirect("login")
    goto = request.POST.get("goto")
    email = request.POST.get("email")
    if not email:
        return redirect("login")
    email = email.strip()
    user = User.objects.filter(Q(email=email.lower()) | Q(slug=email)).first()
    if not user and ((email[-7:] == ".hse.ru") or (email[-7:] == "@hse.ru")):  # –µ—Å–ª–∏ —á–µ–ª –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∞–ª—Å—è –∏ –æ–Ω –∏–∑ –≤—ã—à–∫–∏, —Ç–æ —Å–æ–∑–¥–∞—ë–º –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å
        user = User()
        user.email = email.lower()
        user.slug = user.email[:user.email.index("@")] + str(random.randint(0, 1024))
        user.is_email_unsubscribed = True
        user.is_email_verified = False
        user.moderation_status = User.MODERATION_STATUS_INTRO
        user.full_name = user.email[:user.email.index("@")]
        user.avatar = None
        user.company = None
        user.position = None
        user.city = None
        user.country = None
        user.geo = None
        user.bio = None
        user.contact = None
        user.email_digest_type = User.EMAIL_DIGEST_TYPE_NOPE
        user.telegram_id = None
        user.telegram_data = None
        user.membership_platform_data = None
        user.membership_started_at = datetime.datetime.now()
        user.membership_expires_at = date.fromisoformat('3022-04-25')
        user.save()
        return render(request, "payments/messages/done.html", {
                "email": user.email,
                "goto": goto,
                "restore": user.deleted_at is not None,
            })
    elif user:  # —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å
        return render(request, "error.html", {
                "title": "–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∫–ª—É–±–µ ü¶©",
            "message":  "–ü–æ—á—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è <b>—Ä–µ–≥–∏—Å—Ç—Ä–∞—Å—Ç—Ä–∞—Ü–∏–∏</b>, —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∞–∫–∫–∞—É–Ω—Ç—É –∫–ª—É–±–∞."
                        "<p></p>"
                        "–ü–æ–º–Ω–∏: –æ–¥–Ω–∞ –ø–æ—á—Ç–∞ –≤—ã—à–∫–∏ - –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç"
                        "<p></p>"
                        "–î–ª—è –≤—Ö–æ–¥–∞ –≤ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ email –Ω–∞ —ç—Ç–æ–π üëâ <a href='https://vyshka.club/auth/login/'>—Å—Ç—Ä–∞–Ω–∏—Ü–µ</a> üëà"
                        "<p></p>"
                        "–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–∞–ø–∏—à–∏ –Ω–∞–º, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–º–æ—á—å."
            }, status=404)
    else:  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –Ω–µ –ø–æ—á—Ç—É –≤—ã—à–∫–∏
        return render(request, "error.html", {
                "title": "–ò–∑–≤–∏–Ω–∏ üîí",
            "message":  "–ö–ª—É–± - –∑–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ <a href='https://hse.ru'><b>–í—ã—à–∫–∏ ‚ö∞</b></a>"
                        "<p></p>"
                        "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∫–ª—É–±–µ –≤–≤–µ–¥–∏ <b>–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É –í–®–≠</b>, –Ω–∞–ø—Ä–∏–º–µ—Ä:"
                        "<ul><li>email@hse.ru</li>"
                        "<li>name@miem.hse.ru</li>"
                        "<li>nice@edu.hse.ru</li></ul>"
                        "<p></p>"
                        "–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–∞–ø–∏—à–∏ –Ω–∞–º, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–º–æ—á—å."
            }, status=404)


def email_login(request):  # —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if request.method != "POST":
        return redirect("login")

    goto = request.POST.get("goto")
    email_or_login = request.POST.get("email_or_login")
    if not email_or_login:
        return redirect("login")

    email_or_login = email_or_login.strip()

    if "|-" in email_or_login:
        # secret_hash login
        email_part, secret_hash_part = email_or_login.split("|-", 1)
        user = User.objects.filter(email=email_part, secret_hash=secret_hash_part).first()
        if not user:
            return render(request, "error.html", {
                "title": "–¢–∞–∫–æ–≥–æ —é–∑–µ—Ä–∞ –Ω–µ—Ç ü§î",
                "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. "
                           "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –ø–æ –≤—ã—à–∫–∏–Ω—Å–∫–æ–π –ø–æ—á—Ç–µ –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º—É.",
            }, status=404)

        if user.deleted_at:
            # cancel user deletion
            user.deleted_at = None
            user.save()

        session = Session.create_for_user(user)
        redirect_to = reverse("profile", args=[user.slug]) if not goto else goto
        response = redirect(redirect_to)
        return set_session_cookie(response, user, session)
    else:
        # email/nickname login
        user = User.objects.filter(Q(email=email_or_login.lower()) | Q(slug=email_or_login)).first()
        if not user:
            return render(request, "error.html", {
                "title": "–ö—Ç–æ —Ç—ã —Ç–∞–∫–æ–π ü¶ö",
                "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–æ–π –ø–æ—á—Ç–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —á–ª–µ–Ω–æ–≤ –ö–ª—É–±–∞."
                        "<ul><li>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ <b>–≤—ã—à–∫–∏–Ω—Å–∫—É—é</b> –ø–æ—á—Ç—É –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º(–µ—Å–ª–∏ —Ç—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–ª—É–±–µ): </li>"
                        " <ul><li>email@hse.ru</li>"
                        " <li>name@miem.hse.ru</li>"
                        " <li>nice@edu.hse.ru</li></ul>"
                        "<li>–ï—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–π–¥–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–º–æ—á—å.</li>"
                        "</ul>",
            }, status=404)

        code = Code.create_for_user(user=user, recipient=user.email, length=settings.AUTH_CODE_LENGTH)
        async_task(send_auth_email, user, code)
        async_task(notify_user_auth, user, code)

        return render(request, "auth/email.html", {
            "email": user.email,
            "goto": goto,
            "restore": user.deleted_at is not None,
        })


def email_login_code(request):
    email = request.GET.get("email")
    code = request.GET.get("code")
    if not email or not code:
        return redirect("login")

    goto = request.GET.get("goto")
    email = email.lower().strip()
    code = code.lower().strip()

    user = Code.check_code(recipient=email, code=code)
    session = Session.create_for_user(user)

    if not user.is_email_verified:
        # save 1 click and verify email
        user.is_email_verified = True
        user.save()

    if user.deleted_at:
        # cancel user deletion
        user.deleted_at = None
        user.save()

    redirect_to = reverse("profile", args=[user.slug]) if not goto else goto
    response = redirect(redirect_to)
    return set_session_cookie(response, user, session)
